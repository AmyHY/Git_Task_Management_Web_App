<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>工作项概览</title>
    <!-- CSS -->
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css">
    <!-- Include Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container my-5">
        <h1 class="text-center mb-4">Gitee工作项概览</h1>

        <!-- Button to create a new issue -->
        <div class="text-center mt-4">
            <a href="/create-issue-form" class="btn btn-primary">创建Gitee新工作项</a>
        </div>

        <!-- filter form -->
        <div class="container mt-4">
            <form id="filterForm" method="POST">
                <div class="row justify-content-center">
                    <div class="col-md-1">
                        <div class="form-group">
                            <label for="program">筛选项目</label>
                            <select id="program" name="program" class="form-select">
                                <option value="all">All</option>
                                <% const uniquePrograms = Array.from(new Set(issues_data.map(issue => issue.program?.name).filter(Boolean))); %>
                                <% for (let i = 0; i < uniquePrograms.length; i++) { %>
                                    <option value="<%= uniquePrograms[i] %>"><%- uniquePrograms[i] %></option>
                                <% } %>
                            </select>
                        </div>
                    </div>    
            
                    <div class="col-md-1">
                        <div class="form-group">
                            <label for="repo">筛选仓库</label>
                            <select id="repo" name="repo" class="form-select">
                                <option value="all">All</option>
                                <% const repos = Array.from(new Set(repos_data.map(repo => repo.path))); %>
                                <% for (let i = 0; i < repos.length; i++) { %>
                                    <option value="<%= repos[i] %>"><%- repos[i] %></option>
                                <% } %>
                            </select>
                        </div>
                    </div> 

                    <div class="col-md-1">
                        <div class="form-group">
                            <label for="milestones">筛选里程碑</label>
                            <select id="milestones" name="milestones" class="form-select">
                                <option value="all">All</option>
                                <% const uniqueMilestones = Array.from(new Set(milestones_data.map(milestone => milestone.title))); %>
                                <% for (let i = 0; i < uniqueMilestones.length; i++) { %>
                                    <option value="<%= uniqueMilestones[i] %>"><%- uniqueMilestones[i] %></option>
                                <% } %>
                            </select>
                        </div>
                    </div>
            
                    <div class="dropdown col-md-1  d-flex justify-content-center">
                        <button class="btn btn-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            筛选人员
                        </button>
                        <div class="dropdown-menu" aria-labelledby="userDropdown">
                            <select id="user" name="user" class="form-select" size="5" multiple>
                                <option value="all">All</option>
                                <% const uniqueUserNames = Array.from(new Set(issues_data.map(issue => issue.user.name))); %>
                                <% for (let i = 0; i < uniqueUserNames.length; i++) { %>
                                    <option value="<%= uniqueUserNames[i] %>"><%- uniqueUserNames[i] %></option>
                                <% } %>
                            </select>
                        </div>
                    </div>
                     
            
                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="start-date">Start Date</label>
                            <input type="date" id="start-date" name="start_date" class="form-control">
                        </div>
                    </div> 

                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="end-date">End Date</label>
                            <input type="date" id="end-date" name="end_date" class="form-control">
                        </div>
                    </div>

                    <div class="col-md-1 d-flex justify-content-center">
                        <button type="submit" class="btn btn-primary mt-4">筛选</button>
                    </div>
                </div>
            </form>
            
        </div>


        <!-- first table -->
        <div class="container-fluid mx-auto display-table">
            <div class="table-responsive mt-5">
                <h2 class="text-center mb-4">工作进度</h2>
                <table class="table table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">工程师</th>
                            <th scope="col">逾期+任务未完成的任务 数量</th>
                            <th scope="col">占比 当前逾期+任务未完成总数量</th>
                            <th scope="col">备注</th>
                        </tr>
                    </thead>
                    <tbody id="tbody_progress">
                        <!-- too be populated later in the script -->
                    </tbody> 
                </table>
            </div>
        </div>

        <!-- 饼图 1 -->
        <div class="chartContainer">
            <canvas id="pieChart1" class="pieChart"></canvas>
        </div>


         <!-- second table -->
         <div class="container-fluid mx-auto display-table">
            <div class="table-responsive mt-5">
                <h2 class="text-center mb-4">工作态度</h2>
                <table class="table table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">工程师</th> 
                            <th scope="col">逾期+任务未完成+且未评论的任务 标题&链接</th>
                            <th scope="col">备注</th>
                        </tr>
                    </thead>
                    <tbody id="tbody_attitude">
                        <!-- too be populated later in the script -->
                    </tbody> 
                </table>
            </div>
        </div>


        <!-- third table -->
        <div class="container-fluid mx-auto display-table">
            <div class="table-responsive mt-5">
                <h2 class="text-center mb-4">工作强度</h2>
                <table class="table table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">工程师</th> 
                            <th scope="col">任务数量</th>
                            <th scope="col">占比 当前任务总数量</th> 
                            <th scope="col">备注</th>
                        </tr>
                    </thead>
                    <tbody id="tbody_intensity">
                        <!-- too be populated later in the script -->
                    </tbody> 
                </table>
            </div>
        </div>

        <!-- 饼图 3 -->
        <div class="chartContainer">
            <canvas id="pieChart3" class="pieChart"></canvas>
        </div>

        <!-- fourth table -->
        <div class="container-fluid mx-auto display-table">
            <div class="table-responsive mt-5">
                <h2 class="text-center mb-4">个人进度</h2>
                <table class="table table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">工程师</th> 
                            <th scope="col">未完成任务比例</th>
                            <th scope="col">已完成任务比例</th>
                            <th scope="col">备注</th>
                        </tr>
                    </thead>
                    <tbody id="tbody_individual">
                        <!-- too be populated later in the script -->
                    </tbody> 
                </table>
            </div>
        </div>

    </div>
    
    
    <script src="/app.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function create_pie_chart(pieChartId, userNames, percentages) {
            let pieChartCanvas = document.getElementById(pieChartId);
            let pieChartInstance = new Chart(pieChartCanvas, {
                type: 'pie',
                data: {
                    labels: userNames,
                    datasets: [{
                        data: percentages,
                        backgroundColor: [
                        'rgba(255, 99, 132, 0.5)', // Red
                        'rgba(54, 162, 235, 0.5)', // Blue
                        'rgba(255, 206, 86, 0.5)', // Yellow
                        'rgba(75, 192, 192, 0.5)', // Teal
                            // ...repeat for other users
                        ],
                        borderColor: [
                        'rgba(255, 99, 132, 1)', // Red
                        'rgba(54, 162, 235, 1)', // Blue
                        'rgba(255, 206, 86, 1)', // Yellow
                        'rgba(75, 192, 192, 1)', // Teal
                            // ...repeat for other users
                        ],
                        borderWidth: 1,
                    }],
                },
                options: {},
            });
            return pieChartInstance;
        }

        // Initialize pie charts
        let pieChartInstance1 = create_pie_chart('pieChart1', [], []);
        let pieChartInstance3 = create_pie_chart('pieChart3', [], []);
        
        
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.querySelector('#filterForm');
            console.log("筛选<form>已初始化，请点击筛选按钮显示表格。"); // Debugging


            form.addEventListener('submit', async (event) => {
                event.preventDefault();


                // to fix the bug that user selected from the form is undefined
                const selectedUsers = Array.from(document.querySelectorAll('#user option:checked')).map(option => option.value);
                console.log("selectedUsers = ", selectedUsers);


                const formData = new FormData(form);
                const formDataObject = {};
                formData.forEach((value, key) => {
                    formDataObject[key] = value;
                });
              
                formDataObject.user = selectedUsers; // Manually fix the bug of 'user' not being an array.
                console.log("formDataObject = ", formDataObject);

                const response = await fetch('/filter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formDataObject),
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const filteredData = await response.json(); // filtereData 是表格上方筛选bar 筛选过后的issues（json）
                //---------------------------------------------------------------------------------
                //---------------------接下来根据需要，调整filteredData，放在四个表格中-------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------




                // 得到 userArray，每个element object拥有两个参数：name(String)和issues(Object)
                const userGroups = filteredData.reduce((groups, issue) => {
                    const userName = issue.user.name;
                    if (!groups[userName]) {
                        groups[userName] = [];
                    }
                    groups[userName].push(issue);
                    return groups;
                }, {});
                const userArray = Object.keys(userGroups).map((userName) => ({
                    name: userName,
                    issues: userGroups[userName],
                }));
                console.log("userArray.length = ", userArray.length);



                // fill the First table
                const tbody1 = document.querySelector('#tbody_progress');
                tbody1.innerHTML = ''; 
                const userRows1 = [];
                userArray.forEach((user) => {
                    const user_past_due_and_unfinished_count = user.issues.filter(issue => {
                        if (!issue.deadline) { return false;} // Skip issues without a deadline
                        const today = new Date();
                        return (today >= new Date(issue.deadline)) && (['待办的', '已确认', '进行中'].includes(issue.issue_state));
                    }).length;

                    const everyone_past_due_and_unfinished_count = filteredData.filter(issue => {
                        if (!issue.deadline) { return false;} // Skip issues without a deadline
                        const today = new Date();
                        return (today >= new Date(issue.deadline)) && (['待办的', '已确认', '进行中'].includes(issue.issue_state));
                    }).length;

                    const percentage_past_due_and_unfinished = (user_past_due_and_unfinished_count / everyone_past_due_and_unfinished_count * 100).toFixed(1);
                    
                    const userRow = {
                        name: user.name,
                        pastDueAndUnfinishedCount: user_past_due_and_unfinished_count,
                        percentagePastDueAndUnfinished: parseFloat(percentage_past_due_and_unfinished)
                    };
                    userRows1.push(userRow);
                });

                // 列表排序
                userRows1.sort((a, b) => a.percentagePastDueAndUnfinished - b.percentagePastDueAndUnfinished); // 由小到大排序
                // userRows1.sort((a, b) => b.percentagePastDueAndUnfinished - a.percentagePastDueAndUnfinished); // 由大到小排序
                userRows1.forEach((userRow) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <td>${userRow.name}</td>
                    <td>${userRow.pastDueAndUnfinishedCount}</td>
                    <td>${userRow.percentagePastDueAndUnfinished}%</td>
                    <td><input type="text" class="form-control" /></td>
                    `;
                    tbody1.appendChild(row);
                });
                
                // fill the Second table
                const tbody2 = document.querySelector('#tbody_attitude');
                tbody2.innerHTML = ''; 
                userArray.forEach((user) => {
                    const uncommented_issues = user.issues.filter(issue => {
                        if (!issue.deadline) { return false;} // Skip issues without a deadline
                        const today = new Date();
                        return (today >= new Date(issue.deadline)) && (['待办的', '已确认', '进行中'].includes(issue.issue_state)) && (issue.comments === 0);
                    });
                    const title_array = uncommented_issues.map(issue => issue.title);
                    const url_array = uncommented_issues.map(issue => issue.html_url);
                    const anchorTags = title_array.map((title, index) => `<a href="${url_array[index]}">${title}</a>`);
                    const anchorTagsHTML = anchorTags.join(', ');

                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <td>${user.name}</td>
                    <td>${anchorTagsHTML}</td>
                    <td><input type="text" class="form-control" /></td>
                    `;
                    tbody2.appendChild(row);
                });

                // fill the Third table
                const tbody3 = document.querySelector('#tbody_intensity');
                tbody3.innerHTML = ''; 
                const userRows3 = [];
                userArray.forEach((user) => {
                    const percentage = (user.issues.length / filteredData.length * 100).toFixed(1) + '%';
                    const userRow = {
                        name: user.name,
                        userIssuesLength: user.issues.length,
                        percentage_: parseFloat(percentage)
                    }
                    userRows3.push(userRow);
                });

                // 列表排序
                userRows3.sort((a, b) => a.percentage_ - b.percentage_); // 由小到大排序
                //userRows3.sort((a, b) => b.percentage_ - a.percentage_); // 由大到小排序
                userRows3.forEach((userRow) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <td>${userRow.name}</td>
                    <td>${userRow.userIssuesLength}</td>
                    <td>${userRow.percentage_}%</td>
                    <td><input type="text" class="form-control" /></td>
                    `;
                    tbody3.appendChild(row);
                });

                // fill the Fourth table
                const tbody4 = document.querySelector('#tbody_individual');
                tbody4.innerHTML = ''; 
                userArray.forEach((user) => {
                    const unfinished_count = user.issues.filter(issue => ['待办的', '已确认', '进行中'].includes(issue.issue_state)).length;
                    const finished_count = user.issues.length - unfinished_count;
                    const unfinished_percentage = (unfinished_count / user.issues.length).toFixed(1) * 100;
                    const finished_percentage = (finished_count / user.issues.length).toFixed(1) * 100;

                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <td>${user.name}</td>
                    <td>${unfinished_percentage}%</td>
                    <td>${finished_percentage}%</td>
                    <td><input type="text" class="form-control" /></td>
                    `;
                    tbody4.appendChild(row);
                });

                console.log("Done populating all four tables!");

                //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~饼图~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                

                // First pie chart update
                if (pieChartInstance1 !== undefined) {
                    const userNames1 = userRows1.map(userRow => userRow.name);
                    const percentages1 = userRows1.map(userRow => userRow.percentagePastDueAndUnfinished);
                    pieChartInstance1.data.labels = userNames1;
                    pieChartInstance1.data.datasets[0].data = percentages1;
                    pieChartInstance1.update();
                }

                // Third pie chart
                if (pieChartInstance3 !== undefined) {
                    const userNames3 = userRows3.map(userRow => userRow.name);
                    const percentages3 = userRows3.map(userRow => userRow.percentage_);
                    pieChartInstance3.data.labels = userNames3;
                    pieChartInstance3.data.datasets[0].data = percentages3;
                    pieChartInstance3.update();
                }

            });
        });
    </script>
    
</body>
</html>

    <!-- The data passed into 'table.ejs' from 'app.js':
      {
        assigneeName: 'Assignee Name',
        stateCounts: {
          'open': 5,
          'closed': 3,
          // ... other state counts
        },
        filteredIssuesCount: 8,
        issueTitles_priority: ['Title 1', 'Title 2', 'Title 3'],
        issueTitles_all: ['Title 4', 'Title 5', 'Title 6'],
        issueTitles_progress: ['Open', 'Closed', 'In Progress']
        // ... other data specific to the assignee
      } -->
